[general]

# HTTP 服务器监听的 IP
host = 0.0.0.0

# HTTP 服务器监听的端口
port = 52611

# 是否开启 HTTP 接口，即通过 HTTP 调用 API，见 通信方式的第一种
use_http = true

# WebSocket 服务器监听的 IP
ws_host = 0.0.0.0

# WebSocket 服务器监听的端口
ws_port = 52611

# 是否开启 WebSocket 服务器，可用于调用 API 和推送事件，见 通信方式的第二种
use_ws = false

# 反向 WebSocket Event 和事件上报的共用地址
ws_reverse_url =

# 反向 WebSocket API 地址，如果为空，则使用 ws_reverse_url 指定的值
ws_reverse_api_url =

# 反向 WebSocket 事件上报地址，如果为空，则使用 ws_reverse_url 指定的值
ws_reverse_event_url =

# 反向 WebSocket 客户端断线重连间隔，单位毫秒
ws_reverse_reconnect_interval =

# 是否在关闭状态码为 1000 的时候重连
ws_reverse_reconnect_on_code_1000 =

# 是否使用 Universal 客户端
ws_reverse_use_universal_client =

# 是否使用反向 WebSocket 服务，即插件作为 WebSocket 客户端主动连接指定的 API 和事件上报地址，见 通信方式的第三种
use_ws_reverse = false

# 消息和事件的上报地址，通过 POST 方式请求，数据以 JSON 格式发送
post_url = http://127.0.0.1:52610/message

# HTTP 上报（即访问 post_url）的超时时间，单位秒，0 表示不设置超时
post_timeout = 120

# API 访问 token，如果不为空，则会在接收到请求时验证 Authorization 请求头是否为 Bearer xxxxxxxx，xxxxxxxx 为 access token
access_token =

# 上报数据签名密钥，如果不为空，则会在 HTTP 上报时对 HTTP 正文进行 HMAC SHA1 哈希，使用 secret 的值作为密钥，计算出的哈希值放在上报的 X-Signature 请求头，例如 X-Signature: sha1=f9ddd4863ace61e64f462d41ca311e3d2c1176e2
secret =

# 上报消息格式，string 为字符串格式，array 为数组格式，具体见 消息格式
post_message_format = string

# 是否提供请求 data 目录的文件的功能
serve_data_files = false

# 更新源，默认使用托管在 GitHub 的 richardchien/coolq-http-api-release 仓库，对于 酷Q 运行在国内的情况，可以换成 coding 或 china
update_source = china

# 更新通道，目前有 stable、beta、alpha 三个
update_channel = stable

# 是否自动检查更新（每次启用插件时检查），不启用的情况下，仍然可以在 酷Q 应用菜单中手动检查更新
auto_check_update = false

# 是否自动执行更新，仅在 auto_check_update 启用时有效，若启用，则插件将在自动检查到更新后，自动下载新版本（需要手动重启 酷Q 以生效）
auto_perform_update = false

# 工作线程池大小，用于异步发送消息和一些其它小的异步任务，应根据计算机性能和实际需求适当调节，若设为 0，则使用 CPU 核心数 * 2 + 1
thread_pool_size = 4

# API 服务器线程池大小，用于异步处理请求，应根据计算机性能和实际需求适当调节，若设为 0，则使用 CPU 核心数 * 2 + 1
server_thread_pool_size = 4

# 是否在 CQ:emoji 和实际的 Unicode之间进行转换，转换可能耗更多时间，但日常情况下影响不大，如果你的机器人需要处理非常大段的消息（上千字），且对性能有要求，可以考虑关闭转换
convert_unicode_emoji = true

# 指定事件过滤规则文件，见 事件过滤器，留空将不开启事件过滤器
event_filter =

# 是否启用旧版兼容性，启用时事件上报的数据将和 3.x 版本保持兼容
enable_backward_compatibility = false

# 是否显示日志输出控制台
show_log_console = true

# 最大单日志文件大小，单位字节，默认 6 MB
max_log_file_size = 6291456

# 最大日志文件备份数量（采用日志轮替机制）
max_log_files = 1

# 日志文件和日志控制台的日志等级，可选 debug、info、warning、error、fatal
log_level = info

# 是否启用扩展机制，见 扩展
use_extension = false

# 是否禁用 酷Q 原生日志，由于使用 酷Q 原生日志可能会导致快速重启时插件卡死，所以默认禁用，如果你不在乎重启时卡死，并且需要在 酷Q 原生日志窗口查看插件的日志，可以将此项设为false
disable_coolq_log = true

# QQ 在线状态检测方式，默认（get_stranger_info）通过陌生人查询接口判断，设为 log_db 可切换成从 酷Q 的日志数据库判断，具体区别见 其 API 说明
online_status_detection_method = get_stranger_info

# 是否启用心跳机制，启用时会产生类型为 heartbeat 的元事件，见 元事件
enable_heartbeat = false

# 产生心跳元事件的时间间隔，单位毫秒
heartbeat_interval = 15000

# 是否启用限速 API 调用的支持
enable_rate_limited_actions = false

# 限速 API 调用的排队间隔时间，单位毫秒
rate_limit_interval = 500

# http接口是否支持跨域
enable_cors = false